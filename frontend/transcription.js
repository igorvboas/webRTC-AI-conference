// transcription.js - Gerenciador de transcri√ß√£o em tempo real (usando proxy backend)

class TranscriptionManager {
    constructor() {
        this.socket = null;
        this.isConnected = false;
        this.isTranscribing = false;
        this.currentTranscript = '';
        this.transcriptHistory = [];
        this.audioProcessor = null;
        this.lastSpeaker = null; // Rastrear √∫ltimo falante
        this.currentSpeechText = ''; // Texto da fala atual sendo constru√≠da
        this.currentTranscripthold = ''; // Texto da fala atual sendo constru√≠da
    }

    /**
     * Define a refer√™ncia do socket.io
     */
    setSocket(socketInstance) {
        this.socket = socketInstance;
        this.setupSocketListeners();
    }

    /**
     * Define a refer√™ncia do AudioProcessor
     */
    setAudioProcessor(audioProcessorInstance) {
        this.audioProcessor = audioProcessorInstance;
    }

    /**
     * Configura listeners do socket.io para transcri√ß√£o
     */
    setupSocketListeners() {
        // Mensagens da OpenAI
        this.socket.on('transcription:message', (data) => {
            this.handleMessage(data);
        });

        // Erros
        this.socket.on('transcription:error', (data) => {
            logError('Erro:', data.error);
            this.isConnected = false;
        });

        // Desconex√£o
        this.socket.on('transcription:disconnected', () => {
            log('Desconectado da OpenAI');
            this.isConnected = false;
        });

        // ========== RECEBER TRANSCRI√á√ÉO DE OUTRO PEER ==========
        this.socket.on('receiveTranscriptionFromPeer', (data) => {
            const { transcription, from } = data;
            log('üì© Transcri√ß√£o recebida de', from, ':', transcription);
            this.displayTranscript(transcription, from, false);
        });
        // ========================================================
    }

    /**
     * Inicializa a conex√£o com OpenAI atrav√©s do proxy
     */
    async init() {
        log('Inicializando TranscriptionManager...');
        
        if(!this.socket){
            logError('Socket.io n√£o foi definido! Chame setSocket() primeiro');
            return false;
        }

        try {
            await this.connect();
            return true;
        } catch (error) {
            logError('Erro ao inicializar:', error);
            return false;
        }
    }

    /**
     * Conecta via proxy do backend
     */
    async connect() {
        return new Promise((resolve, reject) => {
            log('Conectando via proxy backend...');
            
            // Timeout de conex√£o
            const connectionTimeout = setTimeout(() => {
                reject(new Error('Timeout na conex√£o'));
            }, 10000);

            // Solicitar conex√£o ao backend
            this.socket.emit('transcription:connect', {}, (response) => {
                clearTimeout(connectionTimeout);
                
                if(response.success){
                    log('‚úÖ Conectado via proxy!');
                    this.isConnected = true;
                    
                    // Configurar sess√£o ap√≥s conectar
                    setTimeout(() => this.configureSession(), 500);
                    resolve();
                } else {
                    logError('Falha na conex√£o:', response.error);
                    reject(new Error(response.error));
                }
            });
        });
    }

    /**
     * Configura a sess√£o do OpenAI Realtime
     */
    configureSession() {
        log('Configurando sess√£o...');
        
        const sessionConfig = {
            type: 'session.update',
            session: {
                // ‚úÖ APENAS TEXTO: Sem √°udio de resposta do assistente
                modalities: ['text'],
                
                // ‚úÖ INSTRU√á√ïES CLARAS: Apenas transcrever, nunca responder
                instructions: 'Voc√™ √© um assistente de transcri√ß√£o. Apenas transcreva o √°udio recebido em portugu√™s brasileiro. NUNCA responda, NUNCA comente, NUNCA interaja. Apenas transcreva exatamente o que foi dito, palavra por palavra.',
                
                // ‚úÖ FORMATO DE INPUT: PCM16 para √°udio recebido
                input_audio_format: CONFIG.AUDIO.FORMAT,
                
                // ‚úÖ TRANSCRI√á√ÉO DE INPUT: Usar Whisper para transcrever √°udio do usu√°rio
                input_audio_transcription: {
                    model: 'whisper-1'
                },
                
                // ‚úÖ DETEC√á√ÉO DE VOZ: VAD (Voice Activity Detection) autom√°tico
                turn_detection: {
                    type: 'server_vad', // Server-side Voice Activity Detection
                    threshold: 0.5,      // Sensibilidade (0.0 a 1.0)
                    prefix_padding_ms: 300,    // Capturar 300ms antes da fala
                    silence_duration_ms: 500   // Considerar pausa ap√≥s 500ms de sil√™ncio
                },
                
                // ‚ùå REMOVIDO: voice, output_audio_format, temperature, max_response_output_tokens
                // N√£o queremos que o assistente gere qualquer tipo de resposta
            }
        };

        this.send(sessionConfig);
        log('‚úÖ Sess√£o configurada para transcri√ß√£o apenas (sem respostas)');
    }

    /**
     * Envia mensagem atrav√©s do proxy
     */
    send(data) {
        if (!this.isConnected || !this.socket) {
            logWarning('N√£o conectado ao proxy');
            return false;
        }

        try {
            this.socket.emit('transcription:send', JSON.stringify(data));
            return true;
        } catch (error) {
            logError('Erro ao enviar mensagem:', error);
            return false;
        }
    }

    /**
     * Processa mensagens recebidas do WebSocket
     */
    handleMessage(data) {
        try {
            const message = JSON.parse(data);
            log('üì® Mensagem recebida:', message.type);

            switch (message.type) {
                case 'session.created':
                    log('‚úÖ Sess√£o criada:', message.session);
                    break;

                case 'session.updated':
                    log('‚úÖ Sess√£o atualizada');
                    break;

                case 'input_audio_buffer.committed':
                    log('‚úÖ Buffer de √°udio confirmado');
                    break;

                case 'input_audio_buffer.speech_started':
                    log('üé§ Fala detectada!');
                    this.isTranscribing = true;
                    break;

                case 'input_audio_buffer.speech_stopped':
                    log('ü§ê Fala pausada');
                    // Finalizar a fala atual quando detectar pausa
                    this.finalizeSpeech();
                    break;

                case 'conversation.item.created':
                    log('üí¨ Item de conversa criado:', message.item);
                    this.handleTranscription(message.item);
                    break;

                case 'conversation.item.input_audio_transcription.completed':
                    log('üìù Transcri√ß√£o de input completa:', message.transcript);
                    // ‚úÖ √öNICO evento correto: transcri√ß√£o do √°udio do USU√ÅRIO
                    // Este evento cont√©m APENAS o que o usu√°rio falou, sem respostas do assistente
                    this.processUserTranscription(message.transcript);
                    break;

                case 'response.created':
                    log('ü§ñ Resposta criada');
                    // ‚ö†Ô∏è Ignorado: n√£o queremos respostas do assistente
                    break;

                case 'response.output_item.added':
                    log('üì§ Item de output adicionado:', message.item);
                    // ‚ö†Ô∏è Ignorado: outputs s√£o respostas do assistente
                    break;

                case 'response.content_part.added':
                    log('üìù Parte de conte√∫do adicionada');
                    // ‚ö†Ô∏è Ignorado: conte√∫do gerado pelo assistente
                    break;

                case 'response.audio_transcript.delta':
                    log('üìù Delta de transcri√ß√£o de √°udio:', message.delta);
                    // ‚ö†Ô∏è Ignorado: transcri√ß√£o do √°udio gerado pelo assistente
                    break;

                // ‚ùå REMOVIDO: response.text.delta
                // Este evento capturava RESPOSTAS DO ASSISTENTE, n√£o transcri√ß√µes do usu√°rio
                // Era a causa do problema 2 (texto do agente aparecendo)

                case 'response.done':
                    log('‚úÖ Resposta completa');
                    break;

                case 'error':
                    logError('‚ùå Erro da API:', message.error);
                    break;

                default:
                    log('üì¶ Tipo de mensagem:', message.type, message);
            }
        } catch (error) {
            logError('Erro ao processar mensagem:', error);
        }
    }

    /**
     * Processa a transcri√ß√£o do usu√°rio (novo m√©todo espec√≠fico)
     */
    processUserTranscription(transcript) {
        if (!transcript) return;


        // ========== L√ìGICA DE DECIS√ÉO: EXIBIR OU ENVIAR ==========
        
        // CASO 1: Sou o OFFERER (quem iniciou a chamada)
        if (typeof didIOffer !== 'undefined' && didIOffer === true) {
            log('‚úÖ Sou OFFERER - exibindo localmente');
            this.displayTranscript(
                transcript, 
                typeof userName !== 'undefined' ? userName : 'Voc√™', 
                true
            );
        } 
        // CASO 2: Sou o ANSWERER (quem atendeu a chamada)
        else if (typeof didIOffer !== 'undefined' && didIOffer === false) {
            // ‚úÖ CORRE√á√ÉO PROBLEMA 1: Answerer SEMPRE envia, NUNCA exibe localmente
            if (typeof remoteUserName !== 'undefined' && remoteUserName) {
                log('‚úÖ Sou ANSWERER - enviando para offerer:', remoteUserName);
                this.sendTranscriptionToPeer(transcript, remoteUserName);
            } else {
                logError('‚ùå ANSWERER sem remoteUserName definido!');
            }
        } 
        // CASO 3: FALLBACK (n√£o deveria acontecer em produ√ß√£o)
        else {
            logWarning('‚ö†Ô∏è FALLBACK - vari√°veis n√£o definidas corretamente');
            logWarning('Isso indica um problema de inicializa√ß√£o');
            // ‚ùå REMOVIDO: N√£o exibir mais no fallback para evitar duplica√ß√£o
            // this.displayTranscript(transcript, 'Voc√™', true);
        }
    }

    /**
     * Processa transcri√ß√£o
     */
    handleTranscription(item) {
        if (item.type === 'message' && item.role === 'user') {
            const content = item.content?.[0];
            if (content?.type === 'input_audio' && content.transcript) {
                log('üìù Transcri√ß√£o do usu√°rio:', content.transcript);
                
                // Verificar se deve exibir localmente ou enviar para outro peer
                // didIOffer e userName s√£o vari√°veis globais do scripts.js
                if (typeof didIOffer !== 'undefined' && didIOffer === true) {
                    // Sou o OFFERER (quem ligou) - Exibir localmente
                    this.displayTranscript(content.transcript, userName, true);
                } else if (typeof didIOffer !== 'undefined' && didIOffer === false && remoteUserName) {
                    // Sou o ANSWERER (quem atendeu) - Enviar para o offerer
                    this.sendTranscriptionToPeer(content.transcript, remoteUserName);
                } else {
                    // Fallback: exibir localmente
                    this.displayTranscript(content.transcript, userName, true);
                }
            }
        }
    }

    /**
     * Envia transcri√ß√£o para outro peer (COM ROOMID)
     */
    sendTranscriptionToPeer(transcription, targetUserName) {
        log('üì§ Enviando transcri√ß√£o para', targetUserName);
        
        // Pegar roomId da vari√°vel global definida em room.js
        const roomId = typeof window.currentRoomId !== 'undefined' ? window.currentRoomId : null;
        
        if (!roomId) {
            logError('‚ùå roomId n√£o definido ao enviar transcri√ß√£o');
            return;
        }
        
        this.socket.emit('sendTranscriptionToPeer', {
            roomId: roomId,  // ‚úÖ Incluir roomId
            transcription: transcription,
            from: userName, // vari√°vel global
            to: targetUserName
        });
    }

    /**
     * Exibe transcri√ß√£o na UI de forma incremental
     */
    displayTranscript(text, speaker, isLocal) {
        const label = isLocal ? 'Voc√™' : speaker;
        
        if (this.lastSpeaker === label) {
            // Mesmo falante - adiciona ao texto atual
            this.currentSpeechText += ' ' + text;
        } else {
            // Falante diferente
            // Consolidar fala anterior
            if (this.lastSpeaker && this.currentSpeechText) {
                this.currentTranscript += this.currentSpeechText + '\n'; // ‚úÖ Quebra AP√ìS texto anterior
            }
            
            // Come√ßar nova fala
            this.lastSpeaker = label;
            this.currentSpeechText = text;
            this.currentTranscript += `[${label}]: `; // Novo label na linha seguinte
        }
        
        // Atualizar textarea
        const transcriptInput = document.getElementById(CONFIG.UI.TRANSCRIPTION_INPUT_ID);
        if (transcriptInput) {
            transcriptInput.value = this.currentTranscript + this.currentSpeechText;
            transcriptInput.scrollTop = transcriptInput.scrollHeight;
        }
    }

    /**
     * Finaliza a fala atual (chamado quando detecta pausa)
     */
    finalizeSpeech() {
        if (this.currentSpeechText) {
            // Consolidar a fala completa no hist√≥rico
            this.currentTranscript += this.currentSpeechText;
            this.currentSpeechText = '';
            log('‚úÖ Fala finalizada');
        }
    }

    /**
     * Atualiza a transcri√ß√£o na UI (mantido para compatibilidade)
     */
    updateTranscript(text) {
        if (!text) return;

        // Adicionar o novo texto
        if (this.currentTranscript) {
            this.currentTranscript += ' ' + text;
        } else {
            this.currentTranscript = text;
        }
        
        // Atualizar textarea de transcri√ß√£o
        const transcriptInput = document.getElementById(CONFIG.UI.TRANSCRIPTION_INPUT_ID);
        if (transcriptInput) {
            transcriptInput.value = this.currentTranscript;
        }

        log('üìÑ Transcri√ß√£o atual:', this.currentTranscript);
    }

    /**
     * Envia √°udio para transcri√ß√£o
     */
    sendAudio(audioBase64) {
        if (!this.isConnected) {
            logWarning('N√£o conectado, √°udio n√£o enviado');
            return false;
        }

        const audioMessage = {
            type: 'input_audio_buffer.append',
            audio: audioBase64
        };

        log('üéµ Enviando chunk de √°udio...', audioBase64.length, 'bytes');
        return this.send(audioMessage);
    }

    /**
     * Envia √°udio para transcri√ß√£o
     */
    sendAudio(audioBase64) {
        if (!this.isConnected) {
            logWarning('N√£o conectado, √°udio n√£o enviado');
            return false;
        }

        const audioMessage = {
            type: 'input_audio_buffer.append',
            audio: audioBase64
        };

        return this.send(audioMessage);
    }

    /**
     * Inicia transcri√ß√£o
     */
    start() {
        log('‚ñ∂Ô∏è Iniciando transcri√ß√£o...');
        this.isTranscribing = true;
        this.currentTranscript = '';

        // Iniciar processamento de √°udio
        if (this.audioProcessor) {
            this.audioProcessor.start((audioBase64) => {
                this.sendAudio(audioBase64);
            });
        } else {
            logWarning('AudioProcessor n√£o est√° dispon√≠vel');
        }
    }

    /**
     * Para transcri√ß√£o
     */
    stop() {
        log('‚è∏Ô∏è Parando transcri√ß√£o...');
        this.isTranscribing = false;
        
        // Finalizar fala atual antes de parar
        this.finalizeSpeech();
        
        // Parar processamento de √°udio
        if (this.audioProcessor) {
            this.audioProcessor.stop();
        }
        
        // Salvar no hist√≥rico
        if (this.currentTranscript) {
            this.transcriptHistory.push({
                timestamp: getTimestamp(),
                text: this.currentTranscript
            });
        }
    }

    /**
     * Desconecta e limpa recursos
     */
    disconnect() {
        log('Desconectando...');
        
        if (this.socket) {
            this.socket.emit('transcription:disconnect');
        }
        
        this.isConnected = false;
        this.isTranscribing = false;
    }

    /**
     * Verifica status da conex√£o
     */
    getStatus() {
        return {
            connected: this.isConnected,
            transcribing: this.isTranscribing,
            transcript: this.currentTranscript,
            history: this.transcriptHistory
        };
    }
}

// Inst√¢ncia global
const transcriptionManager = new TranscriptionManager();